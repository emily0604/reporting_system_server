# import * from "./generated/prisma.graphql"

type SuccessMessage {
  message: String
}

type DailyReportList {
  count: Int
  dailyReports: [DailyReport]
}

input TaskInput {
  projectId: String!
  title: String
  url: String
  logtime: String
}

type Query {
  info: String!

  # Division Query
  divisions: [Division!]!
  division(where: DivisionWhereUniqueInput!): Division

  # Team Query
  teams: [Team!]!
  team(where: TeamWhereUniqueInput!): Team

  # Daily Report Query
  dailyReports(
    where: DailyReportWhereInput
    orderBy: DailyReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): DailyReportList
  dailyReport(where: DailyReportWhereUniqueInput!): DailyReport

  # User Query
  userReports(
    orderBy: DailyReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): DailyReportList
  me: User!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
}

type Mutation {
  #  Division CRUD
  createDivision(name: String!, description: String): Division!
  updateDivision(id: ID!, name: String, description: String): Division!
  deleteDivision(id: ID!): Division

  # Team CRUD
  createTeam(name: String!, description: String): Team!
  updateTeam(id: ID!, name: String, description: String): Team!
  deleteTeam(id: ID!): Team

  #  DailyReport CRUD
  createDailyReport(
    emotion: String!
    title: String!
    tasks: [TaskInput!]
    plan: String!
    comment: String
  ): DailyReport!

  updateDailyReport(
    id: ID!
    emotion: String
    title: String
    tasks: [TaskInput!]
    plan: String
    comment: String
  ): DailyReport!

  deleteDailyReport(id: ID!): DailyReport

  #  WeeklyReport CRUD
  createWeeklyReport(
    issue: String!
    solution: String!
    description: String
    summary: String!
  ): WeeklyReport!

  #  Google Authentication
  authenticate(googleCode: String!): AuthPayload
  signout: SuccessMessage

  # Edit Profile
  editProfile(
    id: ID!
    address: String
    phone: String
    email: String
    avatar: String
  ): User
}

type Subscription {
  dailyReport(where: DailyReportSubscriptionWhereInput): DailyReportSubscriptionPayload
  weeklyReport(where: WeeklyReportSubscriptionWhereInput): WeeklyReportSubscriptionPayload
}

type AuthPayload {
  user: User!
}
