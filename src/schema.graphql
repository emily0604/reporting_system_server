# import * from "./generated/prisma.graphql"

type SuccessMessage {
  message: String
}

type DailyReportList {
  count: Int
  dailyReports: [DailyReport]
}

input TaskInput {
  projectId: String!
  title: String
  url: String
  logtime: String
}

input TaskActivityInput {
  title: String
  url: String
  logtime: String
}

input UserActivityInput {
  user: String!
  activities: [TaskActivityInput!]
}

input UserInput {
  id: ID!
}

type Query {
  info: String!

  # Division Query
  divisions: [Division!]!
  division(where: DivisionWhereUniqueInput!): Division

  # Team Query
  teams: [Team!]!
  team(where: TeamWhereUniqueInput!): Team

  # Daily Report Query
  dailyReports(
    where: DailyReportWhereInput
    orderBy: DailyReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): DailyReportList
  dailyReport(where: DailyReportWhereUniqueInput!): DailyReport

  # User Query
  userReports(
    orderBy: DailyReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): DailyReportList
  me: User!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!

  # Group Query
  group(where: GroupWhereUniqueInput!): Group

  # Project Query
  project(where: ProjectWhereUniqueInput!): Project!
  projects(
    where: ProjectWhereInput
    orderBy: ProjectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Project!]!
}

type Mutation {
  #  Division CRUD
  createDivision(name: String!, description: String): Division!
  updateDivision(id: ID!, name: String, description: String): Division!
  deleteDivision(id: ID!): Division

  # Team CRUD
  createTeam(name: String!, description: String): Team!
  updateTeam(id: ID!, name: String, description: String): Team!
  assignMembers(id: ID!, members: [ID!]): Team!
  deleteTeam(id: ID!): Team

  #  DailyReport CRUD
  createDailyReport(
    emotion: String!
    title: String!
    tasks: [TaskInput!]
    plan: String!
    comment: String
  ): DailyReport!

  updateDailyReport(
    id: ID!
    emotion: String
    title: String
    tasks: [TaskInput!]
    plan: String
    comment: String
  ): DailyReport!

  deleteDailyReport(id: ID!): DailyReport

  #  WeeklyReport CRUD
  createWeeklyReport(
    comment: String!
    membersActivities: [UserActivityInput!]
  ): WeeklyReport!

  # Project CRUD
  createProject(title: String!, members: [ID], teamLeader: ID): Project!
  updateProject(id: ID!, title: String, members: [ID!], teamLeader: ID): Project!
  deleteProject(id: ID!): Project!

  #  Google Authentication
  authenticate(googleCode: String!): AuthPayload
  signout: SuccessMessage

  # Edit Profile
  editProfile(id: ID!, address: String, phone: String, email: String, avatar: String): User
}

type Subscription {
  dailyReport(where: DailyReportSubscriptionWhereInput): DailyReportSubscriptionPayload
  weeklyReport(where: WeeklyReportSubscriptionWhereInput): WeeklyReportSubscriptionPayload
}

type AuthPayload {
  user: User!
}
