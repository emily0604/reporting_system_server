# source: http://localhost:4466
# timestamp: Thu Nov 22 2018 08:24:13 GMT+0700 (+07)

type AggregateDailyReport {
  count: Int!
}

type AggregateDivision {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeeklyReport {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type DailyReport implements Node {
  id: ID!
  emotion: String!
  title: String!
  plan: String!
  comment: String
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DailyReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DailyReportEdge]!
  aggregate: AggregateDailyReport!
}

input DailyReportCreateInput {
  emotion: String!
  title: String!
  plan: String!
  comment: String
  projects: ProjectCreateManyWithoutAttachesInput
  tasks: TaskCreateManyWithoutAttachesInput
  author: UserCreateOneWithoutDailyReportsInput!
}

input DailyReportCreateManyWithoutAuthorInput {
  create: [DailyReportCreateWithoutAuthorInput!]
  connect: [DailyReportWhereUniqueInput!]
}

input DailyReportCreateManyWithoutProjectsInput {
  create: [DailyReportCreateWithoutProjectsInput!]
  connect: [DailyReportWhereUniqueInput!]
}

input DailyReportCreateManyWithoutTasksInput {
  create: [DailyReportCreateWithoutTasksInput!]
  connect: [DailyReportWhereUniqueInput!]
}

input DailyReportCreateWithoutAuthorInput {
  emotion: String!
  title: String!
  plan: String!
  comment: String
  projects: ProjectCreateManyWithoutAttachesInput
  tasks: TaskCreateManyWithoutAttachesInput
}

input DailyReportCreateWithoutProjectsInput {
  emotion: String!
  title: String!
  plan: String!
  comment: String
  tasks: TaskCreateManyWithoutAttachesInput
  author: UserCreateOneWithoutDailyReportsInput!
}

input DailyReportCreateWithoutTasksInput {
  emotion: String!
  title: String!
  plan: String!
  comment: String
  projects: ProjectCreateManyWithoutAttachesInput
  author: UserCreateOneWithoutDailyReportsInput!
}

"""An edge in a connection."""
type DailyReportEdge {
  """The item at the end of the edge."""
  node: DailyReport!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DailyReportOrderByInput {
  id_ASC
  id_DESC
  emotion_ASC
  emotion_DESC
  title_ASC
  title_DESC
  plan_ASC
  plan_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DailyReportPreviousValues {
  id: ID!
  emotion: String!
  title: String!
  plan: String!
  comment: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DailyReportSubscriptionPayload {
  mutation: MutationType!
  node: DailyReport
  updatedFields: [String!]
  previousValues: DailyReportPreviousValues
}

input DailyReportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyReportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyReportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DailyReportWhereInput
}

input DailyReportUpdateInput {
  emotion: String
  title: String
  plan: String
  comment: String
  projects: ProjectUpdateManyWithoutAttachesInput
  tasks: TaskUpdateManyWithoutAttachesInput
  author: UserUpdateOneRequiredWithoutDailyReportsInput
}

input DailyReportUpdateManyWithoutAuthorInput {
  create: [DailyReportCreateWithoutAuthorInput!]
  connect: [DailyReportWhereUniqueInput!]
  disconnect: [DailyReportWhereUniqueInput!]
  delete: [DailyReportWhereUniqueInput!]
  update: [DailyReportUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [DailyReportUpsertWithWhereUniqueWithoutAuthorInput!]
}

input DailyReportUpdateManyWithoutProjectsInput {
  create: [DailyReportCreateWithoutProjectsInput!]
  connect: [DailyReportWhereUniqueInput!]
  disconnect: [DailyReportWhereUniqueInput!]
  delete: [DailyReportWhereUniqueInput!]
  update: [DailyReportUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [DailyReportUpsertWithWhereUniqueWithoutProjectsInput!]
}

input DailyReportUpdateManyWithoutTasksInput {
  create: [DailyReportCreateWithoutTasksInput!]
  connect: [DailyReportWhereUniqueInput!]
  disconnect: [DailyReportWhereUniqueInput!]
  delete: [DailyReportWhereUniqueInput!]
  update: [DailyReportUpdateWithWhereUniqueWithoutTasksInput!]
  upsert: [DailyReportUpsertWithWhereUniqueWithoutTasksInput!]
}

input DailyReportUpdateWithoutAuthorDataInput {
  emotion: String
  title: String
  plan: String
  comment: String
  projects: ProjectUpdateManyWithoutAttachesInput
  tasks: TaskUpdateManyWithoutAttachesInput
}

input DailyReportUpdateWithoutProjectsDataInput {
  emotion: String
  title: String
  plan: String
  comment: String
  tasks: TaskUpdateManyWithoutAttachesInput
  author: UserUpdateOneRequiredWithoutDailyReportsInput
}

input DailyReportUpdateWithoutTasksDataInput {
  emotion: String
  title: String
  plan: String
  comment: String
  projects: ProjectUpdateManyWithoutAttachesInput
  author: UserUpdateOneRequiredWithoutDailyReportsInput
}

input DailyReportUpdateWithWhereUniqueWithoutAuthorInput {
  where: DailyReportWhereUniqueInput!
  data: DailyReportUpdateWithoutAuthorDataInput!
}

input DailyReportUpdateWithWhereUniqueWithoutProjectsInput {
  where: DailyReportWhereUniqueInput!
  data: DailyReportUpdateWithoutProjectsDataInput!
}

input DailyReportUpdateWithWhereUniqueWithoutTasksInput {
  where: DailyReportWhereUniqueInput!
  data: DailyReportUpdateWithoutTasksDataInput!
}

input DailyReportUpsertWithWhereUniqueWithoutAuthorInput {
  where: DailyReportWhereUniqueInput!
  update: DailyReportUpdateWithoutAuthorDataInput!
  create: DailyReportCreateWithoutAuthorInput!
}

input DailyReportUpsertWithWhereUniqueWithoutProjectsInput {
  where: DailyReportWhereUniqueInput!
  update: DailyReportUpdateWithoutProjectsDataInput!
  create: DailyReportCreateWithoutProjectsInput!
}

input DailyReportUpsertWithWhereUniqueWithoutTasksInput {
  where: DailyReportWhereUniqueInput!
  update: DailyReportUpdateWithoutTasksDataInput!
  create: DailyReportCreateWithoutTasksInput!
}

input DailyReportWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyReportWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyReportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyReportWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  emotion: String

  """All values that are not equal to given value."""
  emotion_not: String

  """All values that are contained in given list."""
  emotion_in: [String!]

  """All values that are not contained in given list."""
  emotion_not_in: [String!]

  """All values less than the given value."""
  emotion_lt: String

  """All values less than or equal the given value."""
  emotion_lte: String

  """All values greater than the given value."""
  emotion_gt: String

  """All values greater than or equal the given value."""
  emotion_gte: String

  """All values containing the given string."""
  emotion_contains: String

  """All values not containing the given string."""
  emotion_not_contains: String

  """All values starting with the given string."""
  emotion_starts_with: String

  """All values not starting with the given string."""
  emotion_not_starts_with: String

  """All values ending with the given string."""
  emotion_ends_with: String

  """All values not ending with the given string."""
  emotion_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  author: UserWhereInput
}

input DailyReportWhereUniqueInput {
  id: ID
}

scalar DateTime

type Division implements Node {
  id: ID!
  name: String!
  description: String
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DivisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DivisionEdge]!
  aggregate: AggregateDivision!
}

input DivisionCreateInput {
  name: String!
  description: String
  groups: GroupCreateManyWithoutDivisionInput
}

input DivisionCreateOneWithoutGroupsInput {
  create: DivisionCreateWithoutGroupsInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateWithoutGroupsInput {
  name: String!
  description: String
}

"""An edge in a connection."""
type DivisionEdge {
  """The item at the end of the edge."""
  node: Division!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DivisionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DivisionPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DivisionSubscriptionPayload {
  mutation: MutationType!
  node: Division
  updatedFields: [String!]
  previousValues: DivisionPreviousValues
}

input DivisionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DivisionWhereInput
}

input DivisionUpdateInput {
  name: String
  description: String
  groups: GroupUpdateManyWithoutDivisionInput
}

input DivisionUpdateOneWithoutGroupsInput {
  create: DivisionCreateWithoutGroupsInput
  connect: DivisionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DivisionUpdateWithoutGroupsDataInput
  upsert: DivisionUpsertWithoutGroupsInput
}

input DivisionUpdateWithoutGroupsDataInput {
  name: String
  description: String
}

input DivisionUpsertWithoutGroupsInput {
  update: DivisionUpdateWithoutGroupsDataInput!
  create: DivisionCreateWithoutGroupsInput!
}

input DivisionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
}

input DivisionWhereUniqueInput {
  id: ID
}

type Group implements Node {
  id: ID!
  name: String!
  description: String
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  division: Division
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  description: String
  teams: TeamCreateManyWithoutGroupInput
  division: DivisionCreateOneWithoutGroupsInput
}

input GroupCreateManyWithoutDivisionInput {
  create: [GroupCreateWithoutDivisionInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutTeamsInput {
  create: GroupCreateWithoutTeamsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutDivisionInput {
  name: String!
  description: String
  teams: TeamCreateManyWithoutGroupInput
}

input GroupCreateWithoutTeamsInput {
  name: String!
  description: String
  division: DivisionCreateOneWithoutGroupsInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  description: String
  teams: TeamUpdateManyWithoutGroupInput
  division: DivisionUpdateOneWithoutGroupsInput
}

input GroupUpdateManyWithoutDivisionInput {
  create: [GroupCreateWithoutDivisionInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutDivisionInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutDivisionInput!]
}

input GroupUpdateOneWithoutTeamsInput {
  create: GroupCreateWithoutTeamsInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutTeamsDataInput
  upsert: GroupUpsertWithoutTeamsInput
}

input GroupUpdateWithoutDivisionDataInput {
  name: String
  description: String
  teams: TeamUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutTeamsDataInput {
  name: String
  description: String
  division: DivisionUpdateOneWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutDivisionInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutDivisionDataInput!
}

input GroupUpsertWithoutTeamsInput {
  update: GroupUpdateWithoutTeamsDataInput!
  create: GroupCreateWithoutTeamsInput!
}

input GroupUpsertWithWhereUniqueWithoutDivisionInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutDivisionDataInput!
  create: GroupCreateWithoutDivisionInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  division: DivisionWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRole(data: RoleCreateInput!): Role!
  createTask(data: TaskCreateInput!): Task!
  createProject(data: ProjectCreateInput!): Project!
  createDailyReport(data: DailyReportCreateInput!): DailyReport!
  createWeeklyReport(data: WeeklyReportCreateInput!): WeeklyReport!
  createDivision(data: DivisionCreateInput!): Division!
  createGroup(data: GroupCreateInput!): Group!
  createTeam(data: TeamCreateInput!): Team!
  createUser(data: UserCreateInput!): User!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateDailyReport(data: DailyReportUpdateInput!, where: DailyReportWhereUniqueInput!): DailyReport
  updateWeeklyReport(data: WeeklyReportUpdateInput!, where: WeeklyReportWhereUniqueInput!): WeeklyReport
  updateDivision(data: DivisionUpdateInput!, where: DivisionWhereUniqueInput!): Division
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteDailyReport(where: DailyReportWhereUniqueInput!): DailyReport
  deleteWeeklyReport(where: WeeklyReportWhereUniqueInput!): WeeklyReport
  deleteDivision(where: DivisionWhereUniqueInput!): Division
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteUser(where: UserWhereUniqueInput!): User
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertDailyReport(where: DailyReportWhereUniqueInput!, create: DailyReportCreateInput!, update: DailyReportUpdateInput!): DailyReport!
  upsertWeeklyReport(where: WeeklyReportWhereUniqueInput!, create: WeeklyReportCreateInput!, update: WeeklyReportUpdateInput!): WeeklyReport!
  upsertDivision(where: DivisionWhereUniqueInput!, create: DivisionCreateInput!, update: DivisionUpdateInput!): Division!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput): BatchPayload!
  updateManyTasks(data: TaskUpdateInput!, where: TaskWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyDailyReports(data: DailyReportUpdateInput!, where: DailyReportWhereInput): BatchPayload!
  updateManyWeeklyReports(data: WeeklyReportUpdateInput!, where: WeeklyReportWhereInput): BatchPayload!
  updateManyDivisions(data: DivisionUpdateInput!, where: DivisionWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateInput!, where: GroupWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyDailyReports(where: DailyReportWhereInput): BatchPayload!
  deleteManyWeeklyReports(where: WeeklyReportWhereInput): BatchPayload!
  deleteManyDivisions(where: DivisionWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Project implements Node {
  id: ID!
  title: String!
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  attaches(where: DailyReportWhereInput, orderBy: DailyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyReport!]
  teamLeader: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  title: String!
  description: String
  members: UserCreateManyWithoutProjectsInput
  tasks: TaskCreateManyWithoutProjectInput
  attaches: DailyReportCreateManyWithoutProjectsInput
  teamLeader: UserCreateOneInput
}

input ProjectCreateManyWithoutAttachesInput {
  create: [ProjectCreateWithoutAttachesInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutMembersInput {
  create: [ProjectCreateWithoutMembersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutTasksInput {
  create: ProjectCreateWithoutTasksInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAttachesInput {
  title: String!
  description: String
  members: UserCreateManyWithoutProjectsInput
  tasks: TaskCreateManyWithoutProjectInput
  teamLeader: UserCreateOneInput
}

input ProjectCreateWithoutMembersInput {
  title: String!
  description: String
  tasks: TaskCreateManyWithoutProjectInput
  attaches: DailyReportCreateManyWithoutProjectsInput
  teamLeader: UserCreateOneInput
}

input ProjectCreateWithoutTasksInput {
  title: String!
  description: String
  members: UserCreateManyWithoutProjectsInput
  attaches: DailyReportCreateManyWithoutProjectsInput
  teamLeader: UserCreateOneInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  description: String
  members: UserUpdateManyWithoutProjectsInput
  tasks: TaskUpdateManyWithoutProjectInput
  attaches: DailyReportUpdateManyWithoutProjectsInput
  teamLeader: UserUpdateOneInput
}

input ProjectUpdateManyWithoutAttachesInput {
  create: [ProjectCreateWithoutAttachesInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAttachesInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAttachesInput!]
}

input ProjectUpdateManyWithoutMembersInput {
  create: [ProjectCreateWithoutMembersInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutMembersInput!]
}

input ProjectUpdateOneWithoutTasksInput {
  create: ProjectCreateWithoutTasksInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutTasksDataInput
  upsert: ProjectUpsertWithoutTasksInput
}

input ProjectUpdateWithoutAttachesDataInput {
  title: String
  description: String
  members: UserUpdateManyWithoutProjectsInput
  tasks: TaskUpdateManyWithoutProjectInput
  teamLeader: UserUpdateOneInput
}

input ProjectUpdateWithoutMembersDataInput {
  title: String
  description: String
  tasks: TaskUpdateManyWithoutProjectInput
  attaches: DailyReportUpdateManyWithoutProjectsInput
  teamLeader: UserUpdateOneInput
}

input ProjectUpdateWithoutTasksDataInput {
  title: String
  description: String
  members: UserUpdateManyWithoutProjectsInput
  attaches: DailyReportUpdateManyWithoutProjectsInput
  teamLeader: UserUpdateOneInput
}

input ProjectUpdateWithWhereUniqueWithoutAttachesInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAttachesDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutMembersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutMembersDataInput!
}

input ProjectUpsertWithoutTasksInput {
  update: ProjectUpdateWithoutTasksDataInput!
  create: ProjectCreateWithoutTasksInput!
}

input ProjectUpsertWithWhereUniqueWithoutAttachesInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAttachesDataInput!
  create: ProjectCreateWithoutAttachesInput!
}

input ProjectUpsertWithWhereUniqueWithoutMembersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutMembersDataInput!
  create: ProjectCreateWithoutMembersInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  attaches_every: DailyReportWhereInput
  attaches_some: DailyReportWhereInput
  attaches_none: DailyReportWhereInput
  teamLeader: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  dailyReports(where: DailyReportWhereInput, orderBy: DailyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyReport]!
  weeklyReports(where: WeeklyReportWhereInput, orderBy: WeeklyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeeklyReport]!
  divisions(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Division]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  role(where: RoleWhereUniqueInput!): Role
  task(where: TaskWhereUniqueInput!): Task
  project(where: ProjectWhereUniqueInput!): Project
  dailyReport(where: DailyReportWhereUniqueInput!): DailyReport
  weeklyReport(where: WeeklyReportWhereUniqueInput!): WeeklyReport
  division(where: DivisionWhereUniqueInput!): Division
  group(where: GroupWhereUniqueInput!): Group
  team(where: TeamWhereUniqueInput!): Team
  user(where: UserWhereUniqueInput!): User
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  dailyReportsConnection(where: DailyReportWhereInput, orderBy: DailyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DailyReportConnection!
  weeklyReportsConnection(where: WeeklyReportWhereInput, orderBy: WeeklyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeeklyReportConnection!
  divisionsConnection(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DivisionConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  users: UserCreateManyWithoutRolesInput
}

input RoleCreateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutUsersInput {
  name: String!
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  users: UserUpdateManyWithoutRolesInput
}

input RoleUpdateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  connect: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input RoleUpdateWithoutUsersDataInput {
  name: String
}

input RoleUpdateWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutUsersDataInput!
}

input RoleUpsertWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutUsersDataInput!
  create: RoleCreateWithoutUsersInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  dailyReport(where: DailyReportSubscriptionWhereInput): DailyReportSubscriptionPayload
  weeklyReport(where: WeeklyReportSubscriptionWhereInput): WeeklyReportSubscriptionPayload
  division(where: DivisionSubscriptionWhereInput): DivisionSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Task implements Node {
  id: ID!
  title: String
  url: String!
  logtime: Int!
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  attaches(where: DailyReportWhereInput, orderBy: DailyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyReport!]
  project: Project
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  title: String
  url: String!
  logtime: Int!
  description: String
  members: UserCreateManyWithoutTasksInput
  attaches: DailyReportCreateManyWithoutTasksInput
  project: ProjectCreateOneWithoutTasksInput
}

input TaskCreateManyWithoutAttachesInput {
  create: [TaskCreateWithoutAttachesInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateManyWithoutMembersInput {
  create: [TaskCreateWithoutMembersInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateManyWithoutProjectInput {
  create: [TaskCreateWithoutProjectInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutAttachesInput {
  title: String
  url: String!
  logtime: Int!
  description: String
  members: UserCreateManyWithoutTasksInput
  project: ProjectCreateOneWithoutTasksInput
}

input TaskCreateWithoutMembersInput {
  title: String
  url: String!
  logtime: Int!
  description: String
  attaches: DailyReportCreateManyWithoutTasksInput
  project: ProjectCreateOneWithoutTasksInput
}

input TaskCreateWithoutProjectInput {
  title: String
  url: String!
  logtime: Int!
  description: String
  members: UserCreateManyWithoutTasksInput
  attaches: DailyReportCreateManyWithoutTasksInput
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  logtime_ASC
  logtime_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TaskPreviousValues {
  id: ID!
  title: String
  url: String!
  logtime: Int!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  title: String
  url: String
  logtime: Int
  description: String
  members: UserUpdateManyWithoutTasksInput
  attaches: DailyReportUpdateManyWithoutTasksInput
  project: ProjectUpdateOneWithoutTasksInput
}

input TaskUpdateManyWithoutAttachesInput {
  create: [TaskCreateWithoutAttachesInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutAttachesInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutAttachesInput!]
}

input TaskUpdateManyWithoutMembersInput {
  create: [TaskCreateWithoutMembersInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutMembersInput!]
}

input TaskUpdateManyWithoutProjectInput {
  create: [TaskCreateWithoutProjectInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutProjectInput!]
}

input TaskUpdateWithoutAttachesDataInput {
  title: String
  url: String
  logtime: Int
  description: String
  members: UserUpdateManyWithoutTasksInput
  project: ProjectUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutMembersDataInput {
  title: String
  url: String
  logtime: Int
  description: String
  attaches: DailyReportUpdateManyWithoutTasksInput
  project: ProjectUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutProjectDataInput {
  title: String
  url: String
  logtime: Int
  description: String
  members: UserUpdateManyWithoutTasksInput
  attaches: DailyReportUpdateManyWithoutTasksInput
}

input TaskUpdateWithWhereUniqueWithoutAttachesInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutAttachesDataInput!
}

input TaskUpdateWithWhereUniqueWithoutMembersInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutMembersDataInput!
}

input TaskUpdateWithWhereUniqueWithoutProjectInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutProjectDataInput!
}

input TaskUpsertWithWhereUniqueWithoutAttachesInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutAttachesDataInput!
  create: TaskCreateWithoutAttachesInput!
}

input TaskUpsertWithWhereUniqueWithoutMembersInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutMembersDataInput!
  create: TaskCreateWithoutMembersInput!
}

input TaskUpsertWithWhereUniqueWithoutProjectInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutProjectDataInput!
  create: TaskCreateWithoutProjectInput!
}

input TaskWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  logtime: Int

  """All values that are not equal to given value."""
  logtime_not: Int

  """All values that are contained in given list."""
  logtime_in: [Int!]

  """All values that are not contained in given list."""
  logtime_not_in: [Int!]

  """All values less than the given value."""
  logtime_lt: Int

  """All values less than or equal the given value."""
  logtime_lte: Int

  """All values greater than the given value."""
  logtime_gt: Int

  """All values greater than or equal the given value."""
  logtime_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  attaches_every: DailyReportWhereInput
  attaches_some: DailyReportWhereInput
  attaches_none: DailyReportWhereInput
  project: ProjectWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

type Team implements Node {
  id: ID!
  name: String!
  description: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  group: Group
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  description: String
  users: UserCreateManyWithoutTeamInput
  group: GroupCreateOneWithoutTeamsInput
}

input TeamCreateManyWithoutGroupInput {
  create: [TeamCreateWithoutGroupInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutUsersInput {
  create: TeamCreateWithoutUsersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutGroupInput {
  name: String!
  description: String
  users: UserCreateManyWithoutTeamInput
}

input TeamCreateWithoutUsersInput {
  name: String!
  description: String
  group: GroupCreateOneWithoutTeamsInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  name: String
  description: String
  users: UserUpdateManyWithoutTeamInput
  group: GroupUpdateOneWithoutTeamsInput
}

input TeamUpdateManyWithoutGroupInput {
  create: [TeamCreateWithoutGroupInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutGroupInput!]
}

input TeamUpdateOneWithoutUsersInput {
  create: TeamCreateWithoutUsersInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutUsersDataInput
  upsert: TeamUpsertWithoutUsersInput
}

input TeamUpdateWithoutGroupDataInput {
  name: String
  description: String
  users: UserUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutUsersDataInput {
  name: String
  description: String
  group: GroupUpdateOneWithoutTeamsInput
}

input TeamUpdateWithWhereUniqueWithoutGroupInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutGroupDataInput!
}

input TeamUpsertWithoutUsersInput {
  update: TeamUpdateWithoutUsersDataInput!
  create: TeamCreateWithoutUsersInput!
}

input TeamUpsertWithWhereUniqueWithoutGroupInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutGroupDataInput!
  create: TeamCreateWithoutGroupInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  group: GroupWhereInput
}

input TeamWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  completed: Boolean!
  dailyReports(where: DailyReportWhereInput, orderBy: DailyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyReport!]
  weeklyReports(where: WeeklyReportWhereInput, orderBy: WeeklyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeeklyReport!]
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  membersActivities(where: WeeklyReportWhereInput, orderBy: WeeklyReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeeklyReport!]
  team: Team
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateManyWithoutMembersActivitiesInput {
  create: [UserCreateWithoutMembersActivitiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTasksInput {
  create: [UserCreateWithoutTasksInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDailyReportsInput {
  create: UserCreateWithoutDailyReportsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWeeklyReportsInput {
  create: UserCreateWithoutWeeklyReportsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDailyReportsInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateWithoutMembersActivitiesInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateWithoutProjectsInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateWithoutRolesInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateWithoutTasksInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

input UserCreateWithoutTeamInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  weeklyReports: WeeklyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
}

input UserCreateWithoutWeeklyReportsInput {
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleCreateManyWithoutUsersInput
  dailyReports: DailyReportCreateManyWithoutAuthorInput
  projects: ProjectCreateManyWithoutMembersInput
  tasks: TaskCreateManyWithoutMembersInput
  membersActivities: WeeklyReportCreateManyWithoutMembersActivitiesInput
  team: TeamCreateOneWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  avatar_ASC
  avatar_DESC
  googleId_ASC
  googleId_DESC
  completed_ASC
  completed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  address: String
  phone: String
  email: String!
  avatar: String
  googleId: String
  completed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateManyWithoutMembersActivitiesInput {
  create: [UserCreateWithoutMembersActivitiesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMembersActivitiesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMembersActivitiesInput!]
}

input UserUpdateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
}

input UserUpdateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithoutTasksInput {
  create: [UserCreateWithoutTasksInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTasksInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTasksInput!]
}

input UserUpdateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutDailyReportsInput {
  create: UserCreateWithoutDailyReportsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDailyReportsDataInput
  upsert: UserUpsertWithoutDailyReportsInput
}

input UserUpdateOneRequiredWithoutWeeklyReportsInput {
  create: UserCreateWithoutWeeklyReportsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWeeklyReportsDataInput
  upsert: UserUpsertWithoutWeeklyReportsInput
}

input UserUpdateWithoutDailyReportsDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutMembersActivitiesDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutRolesDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutTasksDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutTeamDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  weeklyReports: WeeklyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
}

input UserUpdateWithoutWeeklyReportsDataInput {
  name: String
  address: String
  phone: String
  email: String
  avatar: String
  googleId: String
  completed: Boolean
  roles: RoleUpdateManyWithoutUsersInput
  dailyReports: DailyReportUpdateManyWithoutAuthorInput
  projects: ProjectUpdateManyWithoutMembersInput
  tasks: TaskUpdateManyWithoutMembersInput
  membersActivities: WeeklyReportUpdateManyWithoutMembersActivitiesInput
  team: TeamUpdateOneWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutMembersActivitiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMembersActivitiesDataInput!
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRolesDataInput!
}

input UserUpdateWithWhereUniqueWithoutTasksInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTasksDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutDailyReportsInput {
  update: UserUpdateWithoutDailyReportsDataInput!
  create: UserCreateWithoutDailyReportsInput!
}

input UserUpsertWithoutWeeklyReportsInput {
  update: UserUpdateWithoutWeeklyReportsDataInput!
  create: UserCreateWithoutWeeklyReportsInput!
}

input UserUpsertWithWhereUniqueWithoutMembersActivitiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMembersActivitiesDataInput!
  create: UserCreateWithoutMembersActivitiesInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRolesDataInput!
  create: UserCreateWithoutRolesInput!
}

input UserUpsertWithWhereUniqueWithoutTasksInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTasksDataInput!
  create: UserCreateWithoutTasksInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamDataInput!
  create: UserCreateWithoutTeamInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  googleId: String

  """All values that are not equal to given value."""
  googleId_not: String

  """All values that are contained in given list."""
  googleId_in: [String!]

  """All values that are not contained in given list."""
  googleId_not_in: [String!]

  """All values less than the given value."""
  googleId_lt: String

  """All values less than or equal the given value."""
  googleId_lte: String

  """All values greater than the given value."""
  googleId_gt: String

  """All values greater than or equal the given value."""
  googleId_gte: String

  """All values containing the given string."""
  googleId_contains: String

  """All values not containing the given string."""
  googleId_not_contains: String

  """All values starting with the given string."""
  googleId_starts_with: String

  """All values not starting with the given string."""
  googleId_not_starts_with: String

  """All values ending with the given string."""
  googleId_ends_with: String

  """All values not ending with the given string."""
  googleId_not_ends_with: String
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  dailyReports_every: DailyReportWhereInput
  dailyReports_some: DailyReportWhereInput
  dailyReports_none: DailyReportWhereInput
  weeklyReports_every: WeeklyReportWhereInput
  weeklyReports_some: WeeklyReportWhereInput
  weeklyReports_none: WeeklyReportWhereInput
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  membersActivities_every: WeeklyReportWhereInput
  membersActivities_some: WeeklyReportWhereInput
  membersActivities_none: WeeklyReportWhereInput
  team: TeamWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  googleId: String
}

type WeeklyReport implements Node {
  id: ID!
  issue: String!
  solution: String!
  description: String
  summary: String!
  membersActivities(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type WeeklyReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WeeklyReportEdge]!
  aggregate: AggregateWeeklyReport!
}

input WeeklyReportCreateInput {
  issue: String!
  solution: String!
  description: String
  summary: String!
  membersActivities: UserCreateManyWithoutMembersActivitiesInput
  author: UserCreateOneWithoutWeeklyReportsInput!
}

input WeeklyReportCreateManyWithoutAuthorInput {
  create: [WeeklyReportCreateWithoutAuthorInput!]
  connect: [WeeklyReportWhereUniqueInput!]
}

input WeeklyReportCreateManyWithoutMembersActivitiesInput {
  create: [WeeklyReportCreateWithoutMembersActivitiesInput!]
  connect: [WeeklyReportWhereUniqueInput!]
}

input WeeklyReportCreateWithoutAuthorInput {
  issue: String!
  solution: String!
  description: String
  summary: String!
  membersActivities: UserCreateManyWithoutMembersActivitiesInput
}

input WeeklyReportCreateWithoutMembersActivitiesInput {
  issue: String!
  solution: String!
  description: String
  summary: String!
  author: UserCreateOneWithoutWeeklyReportsInput!
}

"""An edge in a connection."""
type WeeklyReportEdge {
  """The item at the end of the edge."""
  node: WeeklyReport!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WeeklyReportOrderByInput {
  id_ASC
  id_DESC
  issue_ASC
  issue_DESC
  solution_ASC
  solution_DESC
  description_ASC
  description_DESC
  summary_ASC
  summary_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WeeklyReportPreviousValues {
  id: ID!
  issue: String!
  solution: String!
  description: String
  summary: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WeeklyReportSubscriptionPayload {
  mutation: MutationType!
  node: WeeklyReport
  updatedFields: [String!]
  previousValues: WeeklyReportPreviousValues
}

input WeeklyReportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WeeklyReportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeeklyReportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeeklyReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeeklyReportWhereInput
}

input WeeklyReportUpdateInput {
  issue: String
  solution: String
  description: String
  summary: String
  membersActivities: UserUpdateManyWithoutMembersActivitiesInput
  author: UserUpdateOneRequiredWithoutWeeklyReportsInput
}

input WeeklyReportUpdateManyWithoutAuthorInput {
  create: [WeeklyReportCreateWithoutAuthorInput!]
  connect: [WeeklyReportWhereUniqueInput!]
  disconnect: [WeeklyReportWhereUniqueInput!]
  delete: [WeeklyReportWhereUniqueInput!]
  update: [WeeklyReportUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [WeeklyReportUpsertWithWhereUniqueWithoutAuthorInput!]
}

input WeeklyReportUpdateManyWithoutMembersActivitiesInput {
  create: [WeeklyReportCreateWithoutMembersActivitiesInput!]
  connect: [WeeklyReportWhereUniqueInput!]
  disconnect: [WeeklyReportWhereUniqueInput!]
  delete: [WeeklyReportWhereUniqueInput!]
  update: [WeeklyReportUpdateWithWhereUniqueWithoutMembersActivitiesInput!]
  upsert: [WeeklyReportUpsertWithWhereUniqueWithoutMembersActivitiesInput!]
}

input WeeklyReportUpdateWithoutAuthorDataInput {
  issue: String
  solution: String
  description: String
  summary: String
  membersActivities: UserUpdateManyWithoutMembersActivitiesInput
}

input WeeklyReportUpdateWithoutMembersActivitiesDataInput {
  issue: String
  solution: String
  description: String
  summary: String
  author: UserUpdateOneRequiredWithoutWeeklyReportsInput
}

input WeeklyReportUpdateWithWhereUniqueWithoutAuthorInput {
  where: WeeklyReportWhereUniqueInput!
  data: WeeklyReportUpdateWithoutAuthorDataInput!
}

input WeeklyReportUpdateWithWhereUniqueWithoutMembersActivitiesInput {
  where: WeeklyReportWhereUniqueInput!
  data: WeeklyReportUpdateWithoutMembersActivitiesDataInput!
}

input WeeklyReportUpsertWithWhereUniqueWithoutAuthorInput {
  where: WeeklyReportWhereUniqueInput!
  update: WeeklyReportUpdateWithoutAuthorDataInput!
  create: WeeklyReportCreateWithoutAuthorInput!
}

input WeeklyReportUpsertWithWhereUniqueWithoutMembersActivitiesInput {
  where: WeeklyReportWhereUniqueInput!
  update: WeeklyReportUpdateWithoutMembersActivitiesDataInput!
  create: WeeklyReportCreateWithoutMembersActivitiesInput!
}

input WeeklyReportWhereInput {
  """Logical AND on all given filters."""
  AND: [WeeklyReportWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeeklyReportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeeklyReportWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  issue: String

  """All values that are not equal to given value."""
  issue_not: String

  """All values that are contained in given list."""
  issue_in: [String!]

  """All values that are not contained in given list."""
  issue_not_in: [String!]

  """All values less than the given value."""
  issue_lt: String

  """All values less than or equal the given value."""
  issue_lte: String

  """All values greater than the given value."""
  issue_gt: String

  """All values greater than or equal the given value."""
  issue_gte: String

  """All values containing the given string."""
  issue_contains: String

  """All values not containing the given string."""
  issue_not_contains: String

  """All values starting with the given string."""
  issue_starts_with: String

  """All values not starting with the given string."""
  issue_not_starts_with: String

  """All values ending with the given string."""
  issue_ends_with: String

  """All values not ending with the given string."""
  issue_not_ends_with: String
  solution: String

  """All values that are not equal to given value."""
  solution_not: String

  """All values that are contained in given list."""
  solution_in: [String!]

  """All values that are not contained in given list."""
  solution_not_in: [String!]

  """All values less than the given value."""
  solution_lt: String

  """All values less than or equal the given value."""
  solution_lte: String

  """All values greater than the given value."""
  solution_gt: String

  """All values greater than or equal the given value."""
  solution_gte: String

  """All values containing the given string."""
  solution_contains: String

  """All values not containing the given string."""
  solution_not_contains: String

  """All values starting with the given string."""
  solution_starts_with: String

  """All values not starting with the given string."""
  solution_not_starts_with: String

  """All values ending with the given string."""
  solution_ends_with: String

  """All values not ending with the given string."""
  solution_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  summary: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values containing the given string."""
  summary_contains: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values starting with the given string."""
  summary_starts_with: String

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values not ending with the given string."""
  summary_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  membersActivities_every: UserWhereInput
  membersActivities_some: UserWhereInput
  membersActivities_none: UserWhereInput
  author: UserWhereInput
}

input WeeklyReportWhereUniqueInput {
  id: ID
}
